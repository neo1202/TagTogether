# # 為了讓他能hot reload 到bind mount裡的東西
# # 監控的file不能太多，所以需要workdir一個根目錄資料夾（backend)
# # 然後把app放在底下，這樣一樣能統一使用 python絕對路徑的import 例如：from app.api import auth, user
# # 不然如果照常見的workdir = /app, 就沒辦法統一有個app.在前面了會找不到
# services:
#   app:
#     build:
#       context: .
#       dockerfile: Dockerfile
#     image: backend-app:latest
#     ports:
#       - "8000:8000" # 將容器的 8000 映射到主機的 8000
#     volumes: # 使用bind mount
#       - ./app:/backend/app # 將宿主機的 app 目錄掛載到容器內的 /app
#       - ./db:/backend/db # 暫時加入，可刪
#     restart: always
#     env_file:
#       - .env
#     command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload # workdir已經已經被指出是在app底下了

#   postgres:
#     image: postgres:15
#     # container_name: postgres_container
#     environment:
#       POSTGRES_USER: myuser
#       POSTGRES_PASSWORD: mypassword
#       POSTGRES_DB: mydb
#     ports:
#       - "5432:5432"
#     volumes:
#       - ./db/postgres-init:/docker-entrypoint-initdb.d
#   #     - postgres-data:/var/lib/postgresql/data
#   # volumes:
#   # postgres-data:
#   # restart: always
# # 要改seed data的話 要docker-compose down -v 才能把默認的資料清除 然後重新build


# 要打包上傳到AWS的話 要改成這樣
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: backend-app:latest
    container_name: backend
    ports:
      - "8000:8000"
    volumes:
      - ./app:/backend/app
    restart: always
    env_file:
      - .env
    environment:
      DATABASE_URL_WRITER: ${DATABASE_URL_WRITER}
      DATABASE_URL_READER: ${DATABASE_URL_READER}
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
 